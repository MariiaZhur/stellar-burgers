import { createAsyncThunk } from '@reduxjs/toolkit';
import { getUserApi } from '../../utils/burger-api';
import { getCookie } from '../../utils/cookie';
import { TUser } from '@utils-types';
import { finishAuthCheck } from '../slices/userSlice';

// –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
export const getUserData = createAsyncThunk<
  TUser, // thunk –≤–µ—Ä–Ω–µ—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  void, // –Ω–∏—á–µ–≥–æ –Ω–µ –ø–µ—Ä–µ–¥–∞—ë–º
  { rejectValue: string } // –¢–∏–ø –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ –æ—Ç–∫–ª–æ–Ω–µ–Ω–æ
>('user/getUserData', async (_, thunkAPI) => {
  const { rejectWithValue, dispatch } = thunkAPI;
  try {
    const token = getCookie('accessToken');

    if (!token) {
      dispatch(finishAuthCheck()); // üëà –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É
      return rejectWithValue('–¢–æ–∫–µ–Ω –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç');
    }
    // –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    const response = await getUserApi();
    return response.user;
  } catch (error: any) {
    dispatch(finishAuthCheck());
    return rejectWithValue(
      error.message || '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ'
    );
  }
});
